version: '3.9'
services:
  headscale:
    container_name: headscale
    volumes:
        - /home/ubuntu/docker/headscale/config:/etc/headscale/
        - /home/ubuntu/docker/headscale/keys:/var/lib/headscale/
    expose:
        - 8080
        - 9090
    image: headscale/headscale:latest
    command: headscale serve
    restart: on-failure:5
    networks:
      - network
      - tailscale
    labels:
      - "traefik.docker.network=network"
      - "traefik.enable=true"
      - "traefik.http.routers.$HEAD.rule=Host(`$HEAD.$DOMAIN`) && PathPrefix(`/`) || Host(`$HEAD.$LOCAL.$DOMAIN`) && PathPrefix(`/`)"
      - "traefik.http.routers.$HEAD.entrypoints=https"
      - "traefik.http.routers.$HEAD.tls=true"
      - "traefik.http.routers.$HEAD.service=${HEAD}_svc"
      - "traefik.http.routers.$HEAD.middlewares=chain-authelia@file"
      - "traefik.http.routers.$HEAD.tls.certresolver=myresolver"
      - "traefik.http.services.${HEAD}_svc.loadbalancer.server.port=8080" 

  headscale-ui:
    image: ghcr.io/gurucomputing/headscale-ui:latest
    pull_policy: always
    container_name: headscale-ui
    restart: on-failure:5
    depends_on:
      - headscale
    expose:
        - 80
    networks:
      - network
    labels:
      - "traefik.docker.network=network"
      - "traefik.enable=true"
      - "traefik.http.routers.$HEADUI.rule=Host(`$HEADUI.$DOMAIN`) && PathPrefix(`/web`) || Host(`$HEADUI.$LOCAL.$DOMAIN`) && PathPrefix(`/web`)"
      - "traefik.http.routers.$HEADUI.entrypoints=https"
      - "traefik.http.routers.$HEADUI.tls=true"
      - "traefik.http.routers.$HEADUI.service=${HEADUI}_svc"
      - "traefik.http.routers.$HEADUI.middlewares=chain-authelia@file"
      - "traefik.http.routers.$HEADUI.tls.certresolver=myresolver"
      - "traefik.http.services.${HEADUI}_svc.loadbalancer.server.port=80" 

  tailscale:
    container_name: tailscale
    image: tailscale/tailscale:stable
    hostname: headtailscale
    volumes:
      - /home/ubuntu/docker/tailscale/data:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    depends_on:
      - headscale
    cap_drop: all
    cap_add:
      - NET_ADMIN
      - NET_RAW
    env_file:
      - .env.common
      - .env.tailscale
    restart: on-failure:5
    networks:
      - tailscale

  librespeed:
    image: lscr.io/linuxserver/librespeed:latest
    container_name: librespeed
    env_file:
      - .env.common
      - .env.librespeed
    depends_on:
      - mariadb
    volumes:
      - /path/to/librespeed/config:/config
    expose:
      - 80
    restart: on-failure:5
    networks:
      - network
      - librespeed
    labels:
      - "traefik.docker.network=network"
      - "traefik.enable=true"
      - "traefik.http.routers.$FREE.rule=Host(`$FREE.$DOMAIN`) || Host(`$FREE.$LOCAL.$DOMAIN`)"
      - "traefik.http.routers.$FREE.entrypoints=https"
      - "traefik.http.routers.$FREE.tls=true"
      - "traefik.http.routers.$FREE.service=${FREE}_svc"
      - "traefik.http.routers.$FREE.middlewares=chain-authelia@file"
      - "traefik.http.routers.$FREE.tls.certresolver=myresolver"
      - "traefik.http.services.${FREE}_svc.loadbalancer.server.port=80" 
  
  mariadb:
    image: mariadb:latest
    restart: on-failure:5
    user: network:network
    container_name: librespeed-database
    env_file:
      - .env.common
      - .env.$SHLDB
    volumes:
      - /config/network/librespeed/mariadb:/var/lib/mysql
    networks:
      - librespeed
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

  unifi-db:
    image: mongo:4.4
    container_name: unifi-db
    expose:
      - 27017
    env_file:
      - .env.common
      - .env.mongodb
    volumes:
      - /path/to/data:/data/db
      - /path/to/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    restart: on-failure:5
    networks:
      - unifi

  unifi-network-application:
    image: lscr.io/linuxserver/unifi-network-application:latest
    container_name: unifi-network-application
    depends_on:
      - unifi-db
    env_file:
      - .env.common
      - .env.unifi
    volumes:
      - /path/to/data:/config
    expose:
      - 8443
      - 3478/udp
      - 10001/udp
      - 1900/udp #optional
      - 8843 #optional
      - 8880 #optional
      - 6789 #optional
      - 5514/udp #optional
    ports:
      - 8080:8080
    restart: on-failure:5
    networks:
      - network
      - unifi
    labels:
      - "traefik.docker.network=network"
      - "traefik.enable=true"
      - "traefik.http.routers.$UNI.rule=Host(`$UNI.$LOCAL.$DOMAIN`)"
      - "traefik.http.routers.$UNI.entrypoints=https"
      - "traefik.http.routers.$UNI.tls=true"
      - "traefik.http.routers.$UNI.service=${UNI}_svc"
      - "traefik.http.routers.$UNI.middlewares=chain-authelia@file"
      - "traefik.http.routers.$UNI.tls.certresolver=myresolver"
      - "traefik.http.serversTransports.ignorecert.insecureSkipVerify=true"
      - "traefik.http.services.${UNI}_svc.loadbalancer.server.port=8443" 
      - "traefik.http.services.${UNI}_svc.loadbalancer.serverstransport=ignorecert" ######## CHECK THIS!!!!!!! https://docs.linuxserver.io/FAQ/#strict-proxy
      - "traefik.http.services.${UNI}_svc.loadbalancer.server.scheme=https"

  adguard:
    container_name: adguardhome
    image: adguard/adguardhome
    restart: on-failure:5
    expose:
      - 80
      - 443
      - 3000
    ports:
      - 53:53
      - 67:67/udp
      - 68:68
      - 5443:5443
    networks:
      - network
    volumes:
      - /config/network/adguard/work:/opt/adguardhome/work
      - /config/network/adguard/conf:/opt/adguardhome/conf
    labels:
      - "traefik.docker.network=network"
      - "traefik.enable=true"
      - "traefik.http.routers.$ADGH.rule=Host(`$ADGH.$DOMAIN`) || Host(`$ADGH.$LOCAL.$DOMAIN`)"
      - "traefik.http.routers.$ADGH.entrypoints=https"
      - "traefik.http.routers.$ADGH.tls=true"
      - "traefik.http.routers.$ADGH.service=${ADGH}_svc"
      - "traefik.http.routers.$ADGH.middlewares=chain-authelia@file"
      - "traefik.http.routers.$ADGH.tls.certresolver=myresolver"
      - "traefik.http.services.${ADGH}_svc.loadbalancer.server.port=3000" 

networks:
  network:
    name: "network"
  librespeed:
    name: "librespeed"
  unifi:
    name: "unifi"
  tailscale:
    name: "tailscale"